#include "Arduboy.h"

// global Arduboy instance

Arduboy arduboy;

// define frame rate

#define FRAME_RATE 24

// define draw color

#define COLOR WHITE

// declare program variables

int button_pressed = 0; // checking if button has been pressed in order to create delay
uint8_t last_button = 0;    // marks which button was pressed last: 1=right, 2=left, 3=up, 4=down
int lives = -1;         //When lives = -1, it implies title screen
//Title Bitmap

const uint8_t PROGMEM title_bitmap[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFE, 0x01, 0xFC, 0x03, 0xF8, 0x07, 0xF0, 
0x0F, 0xE0, 0x1F, 0xC0, 0x3F, 0x80, 0x7F, 0xFF, 
0xFF, 0xF1, 0xFE, 0x23, 0xFC, 0x47, 0xF8, 0x8F, 
0xF1, 0x1F, 0xE2, 0x3F, 0xC4, 0x7F, 0x8F, 0xFF, 
0xFF, 0xEF, 0xFF, 0xDF, 0xFF, 0xBF, 0xFF, 0x7F, 
0xFE, 0xFF, 0xFD, 0xFF, 0xFB, 0xFF, 0xF7, 0xFF, 
0xFF, 0xD8, 0x00, 0x70, 0x07, 0xFE, 0x1F, 0xF8, 
0x1F, 0xF0, 0x3F, 0x00, 0x0E, 0x00, 0xFB, 0xFF, 
0xFF, 0xB8, 0x00, 0x70, 0x01, 0xF8, 0x07, 0xE0, 
0x07, 0xC0, 0x0F, 0x00, 0x0E, 0x00, 0x3D, 0xFF, 
0xFF, 0xB8, 0x00, 0x70, 0x01, 0xF0, 0x03, 0xC0, 
0x03, 0x80, 0x07, 0x00, 0x0E, 0x00, 0x3D, 0xFF, 
0xFF, 0xB8, 0xFF, 0xF1, 0xF0, 0xF1, 0xE3, 0xC3, 
0xE3, 0x87, 0xC7, 0x1F, 0xFE, 0x3E, 0x1D, 0xFF, 
0xFF, 0x78, 0xFF, 0xF1, 0xF8, 0xE1, 0xE1, 0xC7, 
0xFF, 0x8F, 0xFF, 0x1F, 0xFE, 0x3F, 0x1E, 0xFF, 
0xFF, 0x78, 0x03, 0xF1, 0xF8, 0xE3, 0xF1, 0xC7, 
0xFF, 0x8F, 0xFF, 0x1F, 0xFE, 0x3F, 0x1E, 0xFF, 
0xFF, 0x78, 0x03, 0xF1, 0xF0, 0xE3, 0xF1, 0xC7, 
0xFF, 0x8F, 0xFF, 0x00, 0x7E, 0x3E, 0x1E, 0xFF, 
0xFF, 0x78, 0x03, 0xF0, 0x01, 0xE3, 0xF1, 0xC7, 
0x03, 0x8E, 0x07, 0x00, 0x7E, 0x00, 0x3E, 0xFF, 
0xFF, 0x78, 0xFF, 0xF0, 0x01, 0xE3, 0xF1, 0xC7, 
0x03, 0x8E, 0x07, 0x00, 0x7E, 0x00, 0x3E, 0xFF, 
0xFF, 0x78, 0xFF, 0xF0, 0x0F, 0xE3, 0xF1, 0xC7, 
0x03, 0x8E, 0x07, 0x1F, 0xFE, 0x01, 0xFE, 0xFF, 
0xFF, 0x78, 0xFF, 0xF1, 0x87, 0xE1, 0xE1, 0xC7, 
0xE3, 0x8F, 0xC7, 0x1F, 0xFE, 0x30, 0xFE, 0xFF, 
0xFF, 0xB8, 0xFF, 0xF1, 0xC3, 0xF1, 0xE3, 0xC3, 
0xC3, 0x87, 0x87, 0x1F, 0xFE, 0x38, 0x7D, 0xFF, 
0xFF, 0xB8, 0xFF, 0xF1, 0xE1, 0xF0, 0x03, 0xC0, 
0x03, 0x80, 0x07, 0x00, 0x0E, 0x3C, 0x3D, 0xFF, 
0xFF, 0xB8, 0xFF, 0xF1, 0xF0, 0xF8, 0x07, 0xE0, 
0x07, 0xC0, 0x0F, 0x00, 0x0E, 0x3E, 0x1D, 0xFF, 
0xFF, 0xD8, 0xFF, 0xF1, 0xF8, 0xFE, 0x1F, 0xF8, 
0x1F, 0xF0, 0x3F, 0x00, 0x0E, 0x3F, 0x1B, 0xFF, 
0xFF, 0xEF, 0xFF, 0xDF, 0xFF, 0xBF, 0xFF, 0x7F, 
0xFE, 0xFF, 0xFD, 0xFF, 0xFB, 0xFF, 0xF7, 0xFF, 
0xFF, 0xF1, 0xFE, 0x23, 0xFC, 0x47, 0xF8, 0x8F, 
0xF1, 0x1F, 0xE2, 0x3F, 0xC4, 0x7F, 0x8F, 0xFF, 
0xFF, 0xFE, 0x01, 0xFC, 0x03, 0xF8, 0x07, 0xF0, 
0x0F, 0xE0, 0x1F, 0xC0, 0x3F, 0x80, 0x7F, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 
0xC3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBD, 
0xBD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xE0, 0x00, 0x13, 0xFF, 0xFF, 0xFF, 0xFF, 0xBD, 
0xBD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xEF, 0xFF, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xBC, 
0x3D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xE0, 0x00, 0x12, 0xFF, 0xFF, 0xFF, 0xFF, 0xA4, 
0x25, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xEF, 0xFF, 0xD1, 0x3F, 0xFF, 0xFF, 0xFF, 0xA4, 
0x25, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xEF, 0xFF, 0xD0, 0x3F, 0xFF, 0xFF, 0xFF, 0x00, 
0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0x0F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x7F, 0x00, 
0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xE0, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFE, 0x00, 
0x00, 0x7E, 0x00, 0x3F, 0xFF, 0x18, 0x03, 0xCC, 
0xF9, 0x3E, 0x72, 0x7F, 0xFF, 0xFF, 0xFC, 0x04, 
0x20, 0x3F, 0xC0, 0x5F, 0xFF, 0x80, 0xC5, 0xFE, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 
0x00, 0x3F, 0xF0, 0x00, 0x00, 0x04, 0x00, 0x00, 
0xC3, 0x0C, 0x30, 0xC3, 0x0C, 0x31, 0xFC, 0xC0, 
0x03, 0x3F, 0xFC, 0x08, 0x00, 0x00, 0x00, 0x00, 
0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x60, 
0x06, 0x3F, 0xFE, 0x34, 0x00, 0x00, 0x00, 0x00, 
0xFF, 0xF8, 0x7E, 0x7F, 0xFF, 0xFF, 0xFC, 0x18, 
0x18, 0x3F, 0xFF, 0x00, 0x7F, 0x00, 0x7F, 0xE3, 
0xFF, 0xFE, 0xFC, 0x3F, 0xFF, 0xFF, 0xFE, 0x0F, 
0xF0, 0x7F, 0xFF, 0x80, 0xB3, 0x80, 0xBE, 0x0F, 
0xFF, 0xFF, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0x00, 
0x00, 0xFF, 0xFF, 0x80, 0xAF, 0x88, 0xBF, 0xFF, 
0xFF, 0xFE, 0x0C, 0x1F, 0xFF, 0xE0, 0xFF, 0x80, 
0x01, 0xFF, 0x07, 0x8A, 0x00, 0x00, 0x00, 0x00, 
0x0E, 0x06, 0x07, 0xE3, 0x81, 0x80, 0x1F, 0x00, 
0x00, 0xF8, 0x01, 0x80, 0x00, 0x00, 0x00, 0x01, 
0xFF, 0xFE, 0x03, 0xFC, 0x7F, 0x80, 0x0E, 0x03, 
0xC0, 0x70, 0x01, 0x80, 0x00, 0x00, 0x02, 0xC0, 
0xFF, 0xFE, 0x03, 0xF9, 0x8F, 0x80, 0x02, 0x07, 
0xE0, 0x40, 0x01, 0x8F, 0xFF, 0xFF, 0xF1, 0x00, 
0xFF, 0xFE, 0x03, 0xF0, 0xE7, 0x80, 0x00, 0x07, 
0xE0, 0x00, 0x01, 0x96, 0x01, 0xFF, 0xF8, 0x00, 
0xFF, 0xFF, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x0F, 
0xF0, 0x00, 0x03, 0x97, 0xFC, 0x00, 0xF8, 0x38, 
0xFF, 0xFF, 0x8F, 0xF9, 0xFF, 0xC0, 0x00, 0x1F, 
0xF8, 0x00, 0x03, 0x97, 0xFF, 0xFF, 0xF8, 0xC6, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x1F, 
0xF8, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x1F, 
0xF8, 0x00, 0x07, 0x39, 0x00, 0x78, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x3F, 
0xFC, 0x00, 0x07, 0x06, 0x00, 0x00, 0x04, 0x00, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x3F, 
0xFC, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x3F, 
0xFC, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x3F, 
0xFC, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x7F, 
0xFE, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x7F, 
0xFE, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x7F, 
0xFE, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x7F, 
0xFE, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x7F, 
0xFE, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x3F, 
0xFC, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x83, 0xE0, 0x3F, 
0xFC, 0x07, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x1F, 
0xF8, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

// End Bitmap

  const uint8_t PROGMEM end_bitmap[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xF0, 0x00, 0xFF, 0xF0, 0x00, 0xFF, 0xF0, 0x00, 
0x00, 0x0F, 0xFF, 0x00, 0x0F, 0xFF, 0x00, 0x0F, 
0xF0, 0x00, 0xFF, 0xF0, 0x00, 0xFF, 0xF0, 0x00, 
0x00, 0x0F, 0xFF, 0x00, 0x0F, 0xFF, 0x00, 0x0F, 
0xF0, 0x00, 0xFF, 0xF0, 0x00, 0xFF, 0xF0, 0x00, 
0x00, 0x0F, 0xFF, 0x00, 0x0F, 0xFF, 0x00, 0x0F, 
0xF0, 0x00, 0xFF, 0xF0, 0x00, 0xFF, 0xF0, 0x00, 
0x00, 0x0F, 0xFF, 0x00, 0x0F, 0xFF, 0x00, 0x0F, 
0xF0, 0x00, 0xFF, 0xF0, 0x00, 0xFF, 0xF0, 0x00, 
0x00, 0x0F, 0xFF, 0x00, 0x0F, 0xFF, 0x00, 0x0F, 
0xF0, 0x00, 0xFF, 0xF0, 0x00, 0xFF, 0xF0, 0x00, 
0x00, 0x0F, 0xFF, 0x00, 0x0F, 0xFF, 0x00, 0x0F, 
0xF0, 0x00, 0xFF, 0xF0, 0x00, 0xFF, 0xF0, 0x00, 
0x00, 0x0F, 0xFF, 0x00, 0x0F, 0xFF, 0x00, 0x0F, 
0xF0, 0x00, 0xFF, 0xF0, 0x00, 0xFF, 0xF0, 0x00, 
0x00, 0x0F, 0xFF, 0x00, 0x0F, 0xFF, 0x00, 0x0F, 
0xF0, 0x00, 0xFF, 0xF0, 0x00, 0xFF, 0xF0, 0x00, 
0x00, 0x0F, 0xFF, 0x00, 0x0F, 0xFF, 0x00, 0x0F, 
0xF0, 0x00, 0xFF, 0xF0, 0x00, 0xFF, 0xF0, 0x00, 
0x00, 0x0F, 0xFF, 0x00, 0x0F, 0xFF, 0x00, 0x0F};
// Frogger bitmap

  const uint8_t PROGMEM frogger_bitmap[] = {0x46, 0x20, 0xCF, 0x30, 0x56, 0xA0, 0x7F, 0xE0, 
  0x1F, 0x80, 0x1F, 0x80, 0x17, 0x80, 0x77, 0xE0, 
  0x5B, 0xA0, 0x4F, 0x20, 0xE6, 0x70, 0x40, 0x20, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// struct definition for frogger

typedef struct frogger_t {

  int x;
  int y;
  int h = 12;
  int w = 12;
  int row;                                       // which row Frogger is in
  const uint8_t PROGMEM *bitmap = frogger_bitmap;
} Frogger;

// struct definition for obstacles
// acts as linked list node
typedef struct obstacle_t {

  int x;               // x coordinate of left of obstacle
  int w;                   // width of the obstacle
  struct obstacle_t *next; // pointer to next obstacle
} Obstacle;

// struct definition for obstacle row
// acts as linked list
typedef struct obstacle_row_t {

  int y;          // position on screen
  int row_speed;  // positive or negative indicates direction
  int bitmap;     // index of bitmap in bitmap array
  Obstacle *head; // pointer to head obstacle (closest to going offscreen)
  Obstacle *tail; // pointer to tail obstacle (furthest from going off screen)
} Row;

  // racecar bitmap

  const uint8_t PROGMEM racecar_bitmap[] = {0x7C, 0x00, 0x00, 0x7C, 0x38, 0x00, 0x10, 0x10, 
0x00, 0xFF, 0xFC, 0x00, 0x45, 0x8F, 0x00, 0x22, 
0xC3, 0xC0, 0x22, 0xC3, 0xC0, 0x45, 0x8F, 0x00, 
0xFF, 0xFC, 0x00, 0x10, 0x10, 0x00, 0x7C, 0x38, 
0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

  // van bitmap

  const uint8_t PROGMEM van_bitmap[] = {0x1E, 0x1C, 0x00, 0x7F, 0x7F, 0x00, 0xB1, 0xF1, 
  0xC0, 0xE1, 0xE1, 0xC0, 0xE3, 0xE1, 0x80, 0xE1, 
  0xE1, 0x80, 0xE1, 0xE1, 0x80, 0xE3, 0xE1, 0x80, 
  0xE1, 0xE1, 0xC0, 0xB1, 0xF1, 0xC0, 0x7F, 0x7F, 
  0x00, 0x1E, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

  // short_truck bitmap

  const uint8_t PROGMEM short_truck_bitmap[] = {0x38, 0x0E, 0x00, 0xFF, 0xFF, 0x80, 0x80, 0x00, 
  0xF8, 0x80, 0x00, 0xCC, 0xFF, 0xFF, 0xD3, 0x80, 
  0x00, 0xD3, 0x80, 0x00, 0xD3, 0xFF, 0xFF, 0xD3, 
  0x80, 0x00, 0xCC, 0x80, 0x00, 0xF8, 0xFF, 0xFF, 
  0x80, 0x38, 0x0E, 0x00};

  // long_truck bitmap

  const uint8_t PROGMEM long_truck_bitmap[] = {0x00, 0x38, 0x00, 0x1D, 0xC0, 0x00, 0x7F, 0xFF, 
0xFF, 0xF0, 0x1E, 0x40, 0x00, 0x00, 0x10, 0x33, 
0xC0, 0x00, 0x00, 0x10, 0xCB, 0xFF, 0xFF, 0xFF, 
0xF0, 0xCA, 0x40, 0x00, 0x00, 0x10, 0xCA, 0x40, 
0x00, 0x00, 0x10, 0xCB, 0xFF, 0xFF, 0xFF, 0xF0, 
0x33, 0xC0, 0x00, 0x00, 0x10, 0x1E, 0x40, 0x00, 
0x00, 0x10, 0x00, 0x7F, 0xFF, 0xFF, 0xF0, 0x00, 
0x38, 0x00, 0x1D, 0xC0, 0x00, 0x00, 0x00, 0x00, 
0x00};

// array of bitmap types
const uint8_t PROGMEM * const bitmaps[] = {racecar_bitmap, van_bitmap, short_truck_bitmap, long_truck_bitmap};

// instantiate Frogger
Frogger frogger;

// create row of racecars
Obstacle racecar1{0, 18, NULL};
Obstacle racecar2{32, 18, &racecar1};
Obstacle racecar3{80, 18, &racecar2};
Row racecar_row{40, 1, 0, &racecar3, &racecar1};

// create row of long trucks
Obstacle long_truck1{64, 36, NULL};
Obstacle long_truck2{6, 36, &long_truck1};
Row long_truck_row{26, -2, 3, &long_truck2, &long_truck1};

// create row of short trucks
Obstacle short_truck1{12, 24, NULL};
Obstacle short_truck2{46, 24, &short_truck1};
Obstacle short_truck3{100, 24, &short_truck2};
Row short_truck_row{12, 2, 2, &short_truck3, &short_truck1};

// create array of rows

Row rows[] = {racecar_row, long_truck_row, short_truck_row};

void loop_row(Row *r) {
  r->tail->next = r->head;
  r->head = r->head->next;
  r->tail = r->tail->next;
  r->tail->next = NULL; 
}

void move_obstacles(Row *r) {
  Obstacle *curr = r->head;
  while(curr) {
    curr->x += r->row_speed;
    curr = curr->next;
  }
  if(r->row_speed < 0) {
    if(r->head->x + r->head->w < 0) {
      r->head->x = 128;
      loop_row(r);
    }
  }
  else if(r->row_speed > 0) {
    if(r->head->x > WIDTH) {
      r->head->x = -r->head->w;
      loop_row(r);
    }
  }
}

int detect_collisions(Row r, Frogger *frogger) {

  Obstacle * curr = r.head;
  int collision = 0;
  while(curr) {
    if ((curr->x < frogger->x && (curr->x + curr->w) > frogger->x) || (curr->x < (frogger->x + frogger->w) && (curr->x + curr->w) > (frogger->x + frogger->w))) {       // set Frogger initial position
      frogger->x = WIDTH/2;
      frogger->y = HEIGHT-frogger->h;
      frogger->row = -1;
      collision = 1;
      break;   
    }
    curr = curr->next;
  }
  return collision;
}

void setup() {

  // initialize arduboy

  arduboy.begin();

  // set framerate

  arduboy.setFrameRate(FRAME_RATE);

  // set Frogger initial position
  frogger.x = WIDTH/2;
  frogger.y = HEIGHT-frogger.h;
  frogger.row = -1;
  lives = -1;
}

int count = 0;
void loop() {
  if (!arduboy.nextFrame()) return;

  if(button_pressed) {
    if(arduboy.notPressed(last_button)) {
      button_pressed = 0;
    }
  }
  
  else {
  
    // move 1 pixel to the right if the right button is pressed
  
    if(arduboy.pressed(RIGHT_BUTTON) && (frogger.x < WIDTH - 2*frogger.w)) {
  
      frogger.x += 12;
      button_pressed = 1;
      last_button = RIGHT_BUTTON;
    }
  
    // move 1 pixel to the left if the left button is pressed
  
    if(arduboy.pressed(LEFT_BUTTON) && (frogger.x > frogger.w)) {
  
      frogger.x -= 12;
      button_pressed = 1;
      last_button = LEFT_BUTTON;
    }
  
    // move 1 pixel up if the up button is pressed
  
    if(arduboy.pressed(UP_BUTTON) && (frogger.y > frogger.h)) {

      frogger.row += 1;
      frogger.y -= 13;
      button_pressed = 1;
      last_button = UP_BUTTON;
    }
  
    // move 1 pixel down if the down button is pressed
  
    if(arduboy.pressed(DOWN_BUTTON) && (frogger.y < HEIGHT - frogger.h)) {

      frogger.row -= 1;
      frogger.y += 13;
      button_pressed = 1;
      last_button = DOWN_BUTTON;
    }
  }

  // move row objects, test for collision
  if (lives > 0){
    if(arduboy.everyXFrames(2)) {
      move_obstacles(&racecar_row);
      move_obstacles(&long_truck_row);
      move_obstacles(&short_truck_row);
      //If collison with rows of vehicles or collision in final row, set back to start with one less life
      if(frogger.row < sizeof(rows)/sizeof(Row)) {
        lives -= detect_collisions(rows[frogger.row], &frogger);
      } else if (frogger.row == 3){
        //If frogger is not in one of these locations, he is not in a "pocket" and loses a life
        if (!(frogger.x == 4 || frogger.x == 28 || frogger.x == 52 || frogger.x == 64 || frogger.x == 88 || frogger.x == 112)) {
          frogger.x = WIDTH/2;
          frogger.y = HEIGHT-frogger.h;
          frogger.row = -1;
          lives--;
        } else {
          //Lives == -2 means game won
          lives = -2;
        }
      }
  
      // clear screen
      arduboy.clear();
      arduboy.setCursor(0, 54);
      arduboy.print("Lives: ");
      arduboy.setCursor(36, 54);
      arduboy.print(lives);
      // reset x and y
  
      arduboy.setCursor(frogger.x, frogger.y);
  
      // draw frogger bitmap
  
      arduboy.drawSlowXYBitmap(frogger.x, frogger.y, frogger.bitmap, 12, 12, COLOR);
  
      // draw rows
  
      Obstacle *curr = racecar_row.head;
      while(curr) {
        arduboy.drawSlowXYBitmap(curr->x, racecar_row.y, racecar_bitmap, 18, 12, COLOR);
        curr = curr->next;
      }
  
     curr = long_truck_row.head;
      while(curr) {
        arduboy.drawSlowXYBitmap(curr->x, long_truck_row.y, long_truck_bitmap, 36, 12, COLOR);
        curr = curr->next;
      }
  
      curr = short_truck_row.head;
      while(curr) {
        arduboy.drawSlowXYBitmap(curr->x, short_truck_row.y, short_truck_bitmap, 24, 12, COLOR);
        curr = curr->next;
      }
      arduboy.drawSlowXYBitmap(0, 0, end_bitmap, 128, 12, COLOR);
    }
  //Lives == -1 means show title screen
  } else if (lives == -1) {
    arduboy.clear();
    arduboy.setCursor(20, 30);
    arduboy.drawSlowXYBitmap(0, 0, title_bitmap, 128, 64, COLOR);
    count++;
    if (count > 60) {
      count = 0;
      lives = 3;
    }
  //Lives == -2 means game won
  } else if (lives == -2) {
    arduboy.clear();
    arduboy.drawSlowXYBitmap(frogger.x, frogger.y, frogger.bitmap, 12, 12, COLOR);
    arduboy.setCursor(40, 30);
    arduboy.print("You Win!");
    count++;
    if (count > 60) {
      count = 0;
      lives = -1;
      frogger.x = WIDTH/2;
      frogger.y = HEIGHT-frogger.h;
      frogger.row = -1;
    }
  //This catches lives == 0 which means game lost
  } else {
    arduboy.clear();
    arduboy.setCursor(40, 30);
    arduboy.print("You Lose");
    count++;
    if (count > 60) {
      count = 0;
      lives = -1;
    }
  }
  // display buffer items on screen
  
  arduboy.display();
}

